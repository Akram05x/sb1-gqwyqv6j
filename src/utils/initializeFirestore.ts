import { 
  collection, 
  addDoc, 
  serverTimestamp, 
  doc, 
  setDoc,
  getDocs,
  query,
  where,
  deleteDoc,
  getDoc
} from 'firebase/firestore';
import { db } from '../lib/firebase';

// Initialize Firestore with sample data
export const initializeFirestore = async () => {
  try {
    console.log('Initializing Firestore collections...');
    
    await Promise.all([
      initializeGothenburgRewards(),
      // Remove test user initialization to avoid permission issues
      // initializeAdminUser(),
      // initializeTestUser()
    ]);
    
    console.log('Firestore initialization completed successfully!');
  } catch (error) {
    console.error('Error initializing Firestore:', error);
  }
};

// Initialize Gothenburg rewards - NEW PRICING STRUCTURE
export const initializeGothenburgRewards = async () => {
  try {
    // Check if rewards already exist
    const rewardsRef = collection(db, 'rewards');
    const existingRewards = await getDocs(rewardsRef);
    
    if (existingRewards.size > 0) {
      console.log('Rewards already exist, skipping initialization');
      return;
    }

    const rewards = [
      {
        title: {
          "sv": "V√§sttrafik M√•nadskort",
          "so": "Baaskii bishii V√§sttrafik", 
          "ar": "ÿ®ÿ∑ÿßŸÇÿ© V√§sttrafik ÿßŸÑÿ¥Ÿáÿ±Ÿäÿ©",
          "es": "Pase mensual V√§sttrafik",
          "en": "V√§sttrafik Monthly Pass"
        },
        description: {
          "sv": "Gratis m√•nadskort f√∂r buss, sp√•rvagn och b√•t i G√∂teborg (v√§rde 890 kr)",
          "so": "Baaskii bilaash ah oo bishi ah oo loogu talagalay bas, tareen iyo doon G√∂teborg (qiimaha 890 kr)",
          "ar": "ÿ®ÿ∑ÿßŸÇÿ© ÿ¥Ÿáÿ±Ÿäÿ© ŸÖÿ¨ÿßŸÜŸäÿ© ŸÑŸÑÿ≠ÿßŸÅŸÑÿßÿ™ ŸàÿßŸÑÿ™ÿ±ÿßŸÖ ŸàÿßŸÑŸÇŸàÿßÿ±ÿ® ŸÅŸä ÿ∫Ÿàÿ™ŸÜÿ®ÿ±ÿ∫ (ŸÇŸäŸÖÿ© 890 ŸÉÿ±ŸàŸÜÿ©)", 
          "es": "Pase mensual gratuito para autob√∫s, tranv√≠a y barco en Gotemburgo (valor 890 kr)",
          "en": "Free monthly pass for bus, tram and boat in Gothenburg (value 890 kr)"
        },
        cost: 25, // NEW PRICE
        icon_name: 'train',
        available: true,
        inventory_count: 20,
        created_at: serverTimestamp()
      },
      {
        title: {
          "sv": "G√∂teborgs Rabattkupong",
          "so": "Kooban qiimo dhimis ah G√∂teborg",
          "ar": "ŸÇÿ≥ŸäŸÖÿ© ÿÆÿµŸÖ ÿ∫Ÿàÿ™ŸÜÿ®ÿ±ÿ∫", 
          "es": "Cup√≥n de descuento de Gotemburgo",
          "en": "Gothenburg Discount Voucher"
        },
        description: {
          "sv": "500 kr rabattkupong f√∂r shopping och restauranger i G√∂teborg centrum",
          "so": "500 kr kooban qiimo dhimis ah oo loogu talagalay wax iibsiga iyo maqaayada xarunta G√∂teborg",
          "ar": "ŸÇÿ≥ŸäŸÖÿ© ÿÆÿµŸÖ 500 ŸÉÿ±ŸàŸÜÿ© ŸÑŸÑÿ™ÿ≥ŸàŸÇ ŸàÿßŸÑŸÖÿ∑ÿßÿπŸÖ ŸÅŸä Ÿàÿ≥ÿ∑ ÿ∫Ÿàÿ™ŸÜÿ®ÿ±ÿ∫",
          "es": "Cup√≥n de descuento de 500 kr para compras y restaurantes en el centro de Gotemburgo", 
          "en": "500 kr discount voucher for shopping and restaurants in Gothenburg city center"
        },
        cost: 30, // NEW PRICE
        icon_name: 'shopping-bag',
        available: true,
        inventory_count: 30,
        created_at: serverTimestamp()
      },
      {
        title: {
          "sv": "Liseberg Entr√©biljett",
          "so": "Tikit galitaanka Liseberg",
          "ar": "ÿ™ÿ∞ŸÉÿ±ÿ© ÿØÿÆŸàŸÑ Liseberg",
          "es": "Entrada a Liseberg",
          "en": "Liseberg Entry Ticket"
        },
        description: {
          "sv": "Gratis entr√©biljett till Liseberg n√∂jespark (v√§rde 495 kr)",
          "so": "Tikit galitaan bilaash ah Liseberg madadaalo park (qiimaha 495 kr)",
          "ar": "ÿ™ÿ∞ŸÉÿ±ÿ© ÿØÿÆŸàŸÑ ŸÖÿ¨ÿßŸÜŸäÿ© ŸÑŸÖÿØŸäŸÜÿ© ŸÖŸÑÿßŸáŸä ŸÑŸäÿ≥ÿ®ÿ±ÿ∫ (ŸÇŸäŸÖÿ© 495 ŸÉÿ±ŸàŸÜÿ©)",
          "es": "Entrada gratuita al parque de atracciones Liseberg (valor 495 kr)",
          "en": "Free entry ticket to Liseberg amusement park (value 495 kr)"
        },
        cost: 40, // NEW PRICE
        icon_name: 'gift',
        available: true,
        inventory_count: 25,
        created_at: serverTimestamp()
      },
      {
        title: {
          "sv": "G√∂teborgs Konstmuseum",
          "so": "Matxafka farshaxanka G√∂teborg",
          "ar": "ŸÖÿ™ÿ≠ŸÅ ÿ∫Ÿàÿ™ŸÜÿ®ÿ±ÿ∫ ŸÑŸÑŸÅŸÜŸàŸÜ",
          "es": "Museo de Arte de Gotemburgo", 
          "en": "Gothenburg Museum of Art"
        },
        description: {
          "sv": "Gratis intr√§de + guidning p√• G√∂teborgs Konstmuseum f√∂r 2 personer",
          "so": "Galitaan bilaash ah + hage matxafka farshaxanka G√∂teborg 2 qof",
          "ar": "ÿØÿÆŸàŸÑ ŸÖÿ¨ÿßŸÜŸä + ÿ¨ŸàŸÑÿ© ÿ•ÿ±ÿ¥ÿßÿØŸäÿ© ŸÅŸä ŸÖÿ™ÿ≠ŸÅ ÿ∫Ÿàÿ™ŸÜÿ®ÿ±ÿ∫ ŸÑŸÑŸÅŸÜŸàŸÜ ŸÑÿ¥ÿÆÿµŸäŸÜ",
          "es": "Entrada gratuita + visita guiada al Museo de Arte de Gotemburgo para 2 personas",
          "en": "Free entry + guided tour at Gothenburg Museum of Art for 2 people"
        },
        cost: 50, // NEW PRICE
        icon_name: 'building',
        available: true,
        inventory_count: 15,
        created_at: serverTimestamp()
      },
      {
        title: {
          "sv": "G√∂teborgs Sk√§rg√•rd B√•ttur",
          "so": "Safar doon ah G√∂teborg archipelago",
          "ar": "ÿ±ÿ≠ŸÑÿ© ÿ®ÿßŸÑŸÇÿßÿ±ÿ® ŸÅŸä ÿ£ÿ±ÿÆÿ®ŸäŸÑ ÿ∫Ÿàÿ™ŸÜÿ®ÿ±ÿ∫",
          "es": "Excursi√≥n en barco por el archipi√©lago de Gotemburgo",
          "en": "Gothenburg Archipelago Boat Trip"
        },
        description: {
          "sv": "Heldagstur till G√∂teborgs vackra sk√§rg√•rd med Styrs√∂bolaget",
          "so": "Safar maalin dhan ah oo aadaya jasiiradaha quruxda badan ee G√∂teborg Styrs√∂bolaget",
          "ar": "ÿ±ÿ≠ŸÑÿ© ŸäŸàŸÖ ŸÉÿßŸÖŸÑ ÿ•ŸÑŸâ ÿ£ÿ±ÿÆÿ®ŸäŸÑ ÿ∫Ÿàÿ™ŸÜÿ®ÿ±ÿ∫ ÿßŸÑÿ¨ŸÖŸäŸÑ ŸÖÿπ Styrs√∂bolaget",
          "es": "Excursi√≥n de d√≠a completo al hermoso archipi√©lago de Gotemburgo con Styrs√∂bolaget",
          "en": "Full day trip to Gothenburg's beautiful archipelago with Styrs√∂bolaget"
        },
        cost: 60, // NEW PRICE
        icon_name: 'leaf',
        available: true,
        inventory_count: 10,
        created_at: serverTimestamp()
      },
      {
        title: {
          "sv": "Restaurang Voucher",
          "so": "Kooban maqaayad",
          "ar": "ŸÇÿ≥ŸäŸÖÿ© ŸÖÿ∑ÿπŸÖ",
          "es": "Vale de restaurante",
          "en": "Restaurant Voucher"
        },
        description: {
          "sv": "500 kr att spendera p√• utvalda restauranger i G√∂teborg centrum",
          "so": "500 kr oo lagu kharash gareyn karo maqaayado la doortay oo ku yaal xarunta G√∂teborg",
          "ar": "500 ŸÉÿ±ŸàŸÜÿ© ŸÑŸÑÿ•ŸÜŸÅÿßŸÇ ŸÅŸä ŸÖÿ∑ÿßÿπŸÖ ŸÖÿÆÿ™ÿßÿ±ÿ© ŸÅŸä Ÿàÿ≥ÿ∑ ÿ∫Ÿàÿ™ŸÜÿ®ÿ±ÿ∫",
          "es": "500 kr para gastar en restaurantes seleccionados en el centro de Gotemburgo",
          "en": "500 kr to spend at selected restaurants in Gothenburg city center"
        },
        cost: 60, // NEW PRICE
        icon_name: 'coffee',
        available: true,
        inventory_count: 40,
        created_at: serverTimestamp()
      }
    ];

    for (const reward of rewards) {
      await addDoc(rewardsRef, reward);
    }

    console.log('‚úÖ Gothenburg rewards initialized successfully! New pricing: 25-60 points.');
  } catch (error) {
    console.error('‚ùå Error initializing rewards:', error);
  }
};

// Force refresh rewards (for manual trigger)
export const forceRefreshRewards = async () => {
  try {
    // Clear existing rewards first
    const rewardsRef = collection(db, 'rewards');
    const existingRewards = await getDocs(rewardsRef);
    
    // Delete all existing rewards
    for (const docSnap of existingRewards.docs) {
      await deleteDoc(doc(db, 'rewards', docSnap.id));
    }
    
    console.log('‚úÖ Cleared existing rewards');

    // Add new rewards
    await initializeGothenburgRewards();
    
    console.log('‚úÖ Rewards refreshed successfully!');
  } catch (error) {
    console.error('‚ùå Error refreshing rewards:', error);
  }
};

// Utility function to check if collections are empty
export const checkCollectionsStatus = async () => {
  try {
    const collections = ['users', 'issues', 'points', 'rewards', 'redemptions'];
    const status: Record<string, number> = {};
    
    for (const collectionName of collections) {
      const snapshot = await getDocs(collection(db, collectionName));
      status[collectionName] = snapshot.size;
    }
    
    console.log('üìä Collections status:', status);
    return status;
  } catch (error) {
    console.error('Error checking collections status:', error);
    return {};
  }
};

// Function to seed sample issues (for development/testing)
export const seedSampleIssues = async () => {
  try {
    const sampleIssues = [
      {
        title: 'Stort h√•l i v√§gen p√• Avenyn',
        description: 'Det finns ett djupt h√•l i v√§gen som kan skada bilar och cyklar. Beh√∂ver √•tg√§rdas snabbt f√∂r s√§kerheten.',
        type: 'pothole',
        location_lat: 57.7089,
        location_lng: 11.9746,
        location_address: 'Kungsportsavenyn 45, G√∂teborg',
        status: 'confirmed',
        user_id: null, // Anonymous report
        image_url: null,
        is_valid_submission: true,
        validated_by: 'ai',
        points_awarded: 0,
        created_at: serverTimestamp(),
        updated_at: serverTimestamp()
      },
      {
        title: 'Trasig gatubelysning vid Liseberg',
        description: 'Gatulampan fungerar inte, g√∂r omr√•det m√∂rkt och os√§kert p√• kv√§llarna. Beh√∂ver bytas ut.',
        type: 'streetlight',
        location_lat: 57.6956,
        location_lng: 11.9929,
        location_address: '√ñrgrytev√§gen 5, G√∂teborg',
        status: 'confirmed',
        user_id: null, // Anonymous for now
        image_url: null,
        is_valid_submission: true,
        validated_by: 'ai',
        points_awarded: 0,
        created_at: serverTimestamp(),
        updated_at: serverTimestamp()
      },
      {
        title: 'Klotter p√• bussh√•llplats Brunnsparken',
        description: 'Omfattande klotter p√• bussh√•llplatsen som beh√∂ver reng√∂ras. P√•verkar omr√•dets utseende negativt.',
        type: 'graffiti',
        location_lat: 57.7065,
        location_lng: 11.9670,
        location_address: 'Brunnsparken, G√∂teborg',
        status: 'in_progress',
        user_id: null, // Anonymous for now
        image_url: null,
        is_valid_submission: true,
        validated_by: 'ai',
        points_awarded: 0,
        created_at: serverTimestamp(),
        updated_at: serverTimestamp()
      }
    ];

    const issuesRef = collection(db, 'issues');
    
    for (const issue of sampleIssues) {
      await addDoc(issuesRef, issue);
    }

    console.log('‚úÖ Sample Gothenburg issues seeded successfully!');
  } catch (error) {
    console.error('‚ùå Error seeding sample issues:', error);
  }
};